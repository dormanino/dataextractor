import os
import json
import datetime
from BPM_STAR_Extractors.DataPoint import DataPoint
from BPM_STAR_Extractors.String_Parser import Parse
import time


class Xyz:

    @staticmethod
    def load_12mpp_raw():
        # TODO: fetch from external data provider
        data = json.load(open(DataPoint.data_12mpp))
        return data
        # optionals = []
        # for optional_data in data:
        #     optional = Optional(optional_data['id'], optional_data['neg'])
        #     optionals.append(optional)
        # return Optionals(optionals)

    @staticmethod
    def load_b3902v_raw():
        # TODO: fetch from external data provider
        # file generated by external app as xxxxxxfinal_variant_data.json

        data = json.load(open(DataPoint.data_b3902v))
        return data
        # optionals = []
        # for optional_data in data:
        #     optional = Optional(optional_data['id'], optional_data['neg'])
        #     optionals.append(optional)
        # return Optionals(optionals)

    @staticmethod
    def load_12mpp_parsed():
        # TODO: fetch from external data provider
        # file generated by 12MPP_Extractor Class as xxxxxx12mpp.json

        data = json.load(open(DataPoint.data_12mpp_parsed))
        return data
        # optionals = []
        # for optional_data in data:
        #     optional = Optional(optional_data['id'], optional_data['neg'])
        #     optionals.append(optional)
        # return Optionals(optionals)

    @staticmethod
    def load_qvvs_with_volume():
        data = json.load(open(DataPoint.data_qvv_bm_vol))
        return data

    @staticmethod
    def load_family_bu_info():
        data = json.load(open(DataPoint.data_info_bm))
        return data

    @staticmethod
    def load_main_gen_file():
        data = json.load(open(DataPoint.data_mashed))
        return data

    @staticmethod
    def string_divide(string, div):
        l = []
        strp = ''
        i = 0
        while i < len(string):
            strp = string[i:i + div].strip().replace(" ", "")
            if strp != '':
                if Xyz.is_float_try(strp):
                    strp = int(strp)
                l.append(strp)
            i += div
        return l

    # def string_divide(string, div):
    #     l = []
    #     strp = ''
    #     for i in range (0, len (string), div):
    #         strp = string[i:i + div].strip().replace(" ", "")
    #         if strp != '':
    #             if Xyz.is_float_try(strp):
    #                 strp = int(strp)
    #             l.append(strp)
    #     return l

    @staticmethod
    def is_float_try(string):
        try:
            float(string)
            return True
        except ValueError:
            return False

    @staticmethod
    def zyx():
        return Xyz.load_b3902v_raw()


class MakeFile:

    @staticmethod
    def parsed_12mpp():
        # generates file xxxxxx12mpp_parsed based on xxxxxx12mpp.json('raw')
        x = Xyz.load_12mpp_raw()
        nd = {}
        lista = []
        month_list = ['jan', 'fev', 'mar', 'abr', 'mai', 'jun', 'jul', 'ago', 'set', 'out', 'nov', 'dez', 'total']

        for key, val in x.items():
            for i in val[1]:
                lista = Parse.parse(i)
            # TODO: change json from list with one string to only string
            nd[key[slice(1, 29)].strip().replace(' ', '')] = dict(zip(month_list, lista))

        date = datetime.date.today()
        date_string = date.strftime('%y%m%d')

        with open(os.getcwd() + '\\DataPoint\\' + date_string + '12mpp_parsed.json', 'w') as f:
            json.dump(nd, f, indent=4, sort_keys=True, ensure_ascii=False)

    @staticmethod
    def bmqvvvol():
        b3902v = Xyz.zyx()
        dozempp = Xyz.load_12mpp_parsed()
        # TODO: dict comprehension
        dicto_tst = {}
        for b in b3902v:
            dicto_tst[str(b['variant'])] = b['baumuster'][0:7]

        # infos = {str(d['baumuster'])[0:7]: d['variant'] for d in b3902v[1].keys & {'baumuster', 'variant'}}

        final_dict = {}
        # TODO: dict comprehension
        for dc in dozempp:
            if dozempp[dc]['total'] != '0':
                final_dict[dc] = dozempp[dc]['total']

        for f in final_dict:
            for b in dicto_tst:
                if f == b:
                    volume = final_dict[f]
                    final_dict[f] = dicto_tst[b], volume
                    break

        set_bm = set()
        for dt in final_dict.values():
            set_bm.add(dt[0])
        print(set_bm)

        data_sum = 0
        dict_tst = {}
        data_tot_sum = 0
        for po in set_bm:
            for dt in final_dict.items():
                if po == dt[1][0]:
                    data_sum += int(dt[1][1])
            data_tot_sum += data_sum
            dict_tst[po] = data_sum
            data_sum = 0

        date = datetime.date.today()
        date_string = date.strftime('%y%m%d')

        with open(os.getcwd() + '\\DataPoint\\' + date_string + 'qvv_bmvol.json', 'w') as f:
            json.dump(final_dict, f, indent=2, sort_keys=True, ensure_ascii=False)

        with open(os.getcwd() + '\\DataPoint\\' + date_string + 'bmvol_tot.json', 'w') as f:
            json.dump(dict_tst, f, sort_keys=True, ensure_ascii=False)

    @staticmethod
    def concatenateinfos():
        qvv_info = Xyz.load_qvvs_with_volume()
        b3902v_info = Xyz.load_b3902v_raw()
        gen_info = Xyz.load_family_bu_info()
        prog_prod = Xyz.load_12mpp_parsed()

        print(type(qvv_info))
        dicto = {}
        qvv_with_volume_list = [[key, val] for key, val in qvv_info.items()]
        info_a_ver = [[info, bm] for info, bm in gen_info.items()]
        for bm_qvv in qvv_with_volume_list:
            for bm_info in info_a_ver:
                if bm_info[0] == bm_qvv[1][0]:
                    dicto[bm_qvv[0]] = bm_info
        for key_dicto, val_dicto in dicto.items():
            if key_dicto in prog_prod:
                dicto[key_dicto] = [dicto[key_dicto], prog_prod[key_dicto]]

        data_prev = {val['variant']: val['codes'] for val in b3902v_info}

        for key_dicto, val_dicto in dicto.items():
            if key_dicto in data_prev:
                dicto[key_dicto] = [dicto[key_dicto], data_prev[key_dicto]]

        date = datetime.date.today()
        date_string = date.strftime('%y%m%d')

        with open(os.getcwd() + '\\DataPoint\\' + date_string + 'dict_end.json', 'w') as f:
            json.dump(dicto, f, indent=4, sort_keys=True, ensure_ascii=False)

    @staticmethod
    def code_vs_bm_qty_matrix():
        start_time = time.time ()
        input_main = Xyz.load_main_gen_file()

        codes = set()
        bms = set()
        dicio_qvv_codes = {}
        dicio_qvv_codes_1 = {}
        for i, j in input_main.items():
            volume = j[0][1].get('total')
            bm = j[0][0][0]
            code_swap = []
            for k in j[1]:
                codes.add(k['code'])
                code_swap.append({k['code']: [bm, volume]})

            dicio_qvv_codes[i] = code_swap

        dicio_qvv_codes_1 = dicio_qvv_codes
        print("--- %s seconds ---" % (time.time() - start_time))
        bms_list = []
        # set of bmÂ´s
        for i, j in input_main.items():
            bms.add(j[0][0][0])
        print("--- %s seconds ---" % (time.time() - start_time))
        # Excel Header Creation
        bms_list = list(bms)
        bms_list.sort()
        counter = 0
        bms_dict_index = {}
        for item in bms_list:
            bms_dict_index[item] = counter
            counter += 1
        # Excel rows Creation
        codes_list = list(codes)
        codes_list.sort()
        counter = 0
        codes_dict_index = {}
        for item in codes_list:
            codes_dict_index[item] = counter
            counter += 1
        print("--- %s seconds ---" % (time.time() - start_time))
        final_dict = {}
        bm_subset = set()
        bm_sublist = []
        sum_code_bm = 0
        gen_sum = 0
        # lista contendo conjunto sem repeticao de todos os codes
        for code_master in codes:
            #  dicionario contendo inputs de qvv com volume, bm, e codes. Chave = qvv, Valor = sub_dicionario
            # sub_dicionario: Chave => code, Valor = lista [str 'bm', str 'valor']
            for qvv, code_dictio in dicio_qvv_codes.items():
                for dados in code_dictio:
                    for code, bm_vol_lst in dados.items():
                        if code == code_master:
                            bm_subset.add(bm_vol_lst[0])

            for bm_sub in bm_subset:
                for qvv_1, code_dictio_1 in dicio_qvv_codes_1.items():
                    for dados_1 in code_dictio_1:
                        for code_1, bm_vol_lst_1 in dados_1.items():
                            if code_master == code_1:
                                code_str = bm_vol_lst_1[0]
                                if code_str == bm_sub:
                                    sum_code_bm += int(bm_vol_lst_1[1])
                                    gen_sum += int(bm_vol_lst_1[1])

                bm_sublist.append([bm_sub, sum_code_bm])
                sum_code_bm = 0
            final_dict[code_master] = [gen_sum, bm_sublist]
            gen_sum = 0
            bm_sublist = []
            bm_subset = set()
        print("--- %s seconds ---" % (time.time() - start_time))
        # matrix_bm_code_item_blueprint = [''] * (len(bms_dict_index) + 2)  # +2 because of first item and the total as last
        bm_code_matrix = [[''] * (len(bms_dict_index) + 2)] * (len(codes_dict_index) + 1)  # +1 because of the header
        matrix_bm_code_item_blueprint = None
        #
        for head_data, iter_bla in bms_dict_index.items():
            print(head_data, iter_bla)
            bm_code_matrix[0][iter_bla] = head_data
        for code_data, iter_code_data in codes_dict_index.items():
            print(code_data, iter_code_data)
            bm_code_matrix[0][iter_code_data+1] = code_data

        with open(os.getcwd() + '\\DataPoint\\' + 'code_qt_by_bm.json', 'w') as f:
            json.dump(final_dict, f, indent=6, sort_keys=True, ensure_ascii=False)
        print("--- %s seconds ---" % (time.time() - start_time))

        with open(os.getcwd() + '\\DataPoint\\' + 'matrix.json', 'w') as f:
            json.dump(matrix_bm_code, f, sort_keys=True, ensure_ascii=False)


MakeFile.parsed_12mpp()
MakeFile.bmqvvvol()
MakeFile.concatenateinfos()
# MakeFile.code_vs_bm_qty_matrix()
